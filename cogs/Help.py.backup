import discord
import json
from discord.ext import commands
from cogs.logging.logger import CogLogger
from utils.error_handler import ErrorHandler
from typing import Dict, List, Union

logger = CogLogger('Help')
with open('data/config.json', 'r') as f:
    data = json.load(f)
BOT_ADMINS = data['OWNER_IDS']

class HelpPaginator(discord.ui.View):
    def __init__(self, pages, author, cog_page_map, timeout=180):
        super().__init__(timeout=timeout)
        self.pages = pages
        self.author = author
        self.current_page = 0
        self.message = None
        self.cog_page_map = cog_page_map
        self.current_select_page = 0
        
        # Group cogs into chunks for select menus (24 per select, leaving room for overview)
        self.cog_groups = []
        cog_items = list(cog_page_map.items())
        
        # Split cogs into groups of max 24 (leaving room for overview option)
        chunk_size = 23  # Leave room for "Overview" and "More..."
        for i in range(0, len(cog_items), chunk_size):
            chunk = cog_items[i:i + chunk_size]
            self.cog_groups.append(chunk)
        
        # Initialize the select menus
        self._setup_select_menus()
        
        # Update button states
        self.update_buttons()
    
    def _setup_select_menus(self):
        """Setup select menus based on current select page"""
        # Clear existing select menus
        for item in self.children[:]:
            if isinstance(item, discord.ui.Select):
                self.remove_item(item)
        
        if not self.cog_groups:
            return
            
        # Add main category select
        select = discord.ui.Select(
            placeholder="Jump to category...",
            custom_id="category_select",
            row=1
        )
        
        # Add overview option
        select.add_option(label="üìã Overview", value="0", description="View all categories", emoji="üìã")
        
        # Add current group of cogs
        current_group = self.cog_groups[self.current_select_page] if self.current_select_page < len(self.cog_groups) else []
        for cog_name, page_num in current_group:
            # Get emoji for cog if available
            emoji = self._get_cog_emoji(cog_name)
            pretty_name = self._prettify_cog_name(cog_name)
            select.add_option(
                label=pretty_name,
                value=str(page_num),
                description=f"View {pretty_name.lower()} commands",
                emoji=emoji
            )
        
        # Add navigation options if we have multiple groups
        if len(self.cog_groups) > 1:
            if self.current_select_page > 0:
                select.add_option(label="‚¨ÖÔ∏è Previous Categories", value="prev_select", description="View previous categories", emoji="‚¨ÖÔ∏è")
            if self.current_select_page < len(self.cog_groups) - 1:
                select.add_option(label="‚û°Ô∏è More Categories", value="next_select", description="View more categories", emoji="‚û°Ô∏è")
        
        select.callback = self.select_callback
        self.add_item(select)
    
    def _get_cog_emoji(self, cog_name):
        """Get appropriate emoji for cog category"""
        category_emojis = {
            'Economy': 'üí∞', 'Fun': 'üéÆ', 'Utility': 'üîß', 'Moderation': 'üõ°Ô∏è',
            'Music': 'üéµ', 'Settings': '‚öôÔ∏è', 'Admin': 'üëë', 'Help': '‚ùì',
            'Stats': 'üìä', 'AI': 'ü§ñ', 'Welcoming': 'üëã', 'VoteBans': 'üó≥Ô∏è',
            'Reminders': '‚è∞', 'AutoFishing': 'üé£', 'Shop': 'üõí', 'Work': 'üíº',
            'Gambling': 'üé∞', 'Bazaar': 'üè™', 'Trading': 'üí±', 'Giveaway': 'üéÅ'
        }
        return category_emojis.get(cog_name, 'üìÅ')
    
    async def select_callback(self, interaction: discord.Interaction):
        """Handle select menu interactions"""
        if interaction.user != self.author:
            return await interaction.response.send_message("This isn't your help menu!", ephemeral=True)
        
        value = interaction.data['values'][0]
        
        if value == "prev_select":
            self.current_select_page = max(0, self.current_select_page - 1)
            self._setup_select_menus()
            await interaction.response.edit_message(view=self)
        elif value == "next_select":
            self.current_select_page = min(len(self.cog_groups) - 1, self.current_select_page + 1)
            self._setup_select_menus()
            await interaction.response.edit_message(view=self)
        else:
            # Navigate to specific page
            self.current_page = int(value)
            self.update_buttons()
            await interaction.response.edit_message(embed=self.pages[self.current_page], view=self)
    
    def update_buttons(self):
        """Update button states based on current page"""
        self.prev_button.disabled = len(self.pages) <= 1
        self.next_button.disabled = len(self.pages) <= 1
        
        # Update labels to show page numbers
        if len(self.pages) > 1:
            self.page_info.label = f"{self.current_page + 1}/{len(self.pages)}"
    
    @discord.ui.button(label="‚¨ÖÔ∏è", style=discord.ButtonStyle.secondary, custom_id="prev")
    async def prev_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.author:
            return await interaction.response.send_message("This isn't your help menu!", ephemeral=True)
        
        self.current_page = (self.current_page - 1) % len(self.pages)
        self.update_buttons()
        await interaction.response.edit_message(embed=self.pages[self.current_page], view=self)
    
    @discord.ui.button(label="1/1", style=discord.ButtonStyle.primary, custom_id="page_info", disabled=True)
    async def page_info(self, interaction: discord.Interaction, button: discord.ui.Button):
        pass  # This button is just for display
    
    @discord.ui.button(label="‚û°Ô∏è", style=discord.ButtonStyle.secondary, custom_id="next")
    async def next_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.author:
            return await interaction.response.send_message("This isn't your help menu!", ephemeral=True)
        
        self.current_page = (self.current_page + 1) % len(self.pages)
        self.update_buttons()
        await interaction.response.edit_message(embed=self.pages[self.current_page], view=self)
    
    @discord.ui.button(label="üóëÔ∏è", style=discord.ButtonStyle.danger, custom_id="delete")
    async def delete_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.author:
            return await interaction.response.send_message("Only the command author can delete this!", ephemeral=True)
        
        await interaction.response.defer()
        if self.message:
            await self.message.delete()

    async def on_timeout(self):
        """Disable all buttons when the view times out"""
        for item in self.children:
            item.disabled = True
        
        if self.message:
            try:
                await self.message.edit(view=self)
            except discord.NotFound:
                pass  # Message was already deleted


class Help(commands.Cog, ErrorHandler):
    def __init__(self, bot):
        ErrorHandler.__init__(self)
        self.bot = bot
        
        # Define category mappings and emojis
        self.category_info = {
            'Economy': {'emoji': 'üí∞', 'description': 'Money, work, fishing, gambling'},
            'Fun': {'emoji': 'üéÆ', 'description': 'Games, entertainment, random fun'},
            'Utility': {'emoji': 'üîß', 'description': 'Server info, user tools, utilities'},
            'Moderation': {'emoji': 'üõ°Ô∏è', 'description': 'Admin tools, server management'},
            'Music': {'emoji': 'üéµ', 'description': 'Music playback and queue'},
            'Settings': {'emoji': '‚öôÔ∏è', 'description': 'Bot configuration and preferences'},
            'Admin': {'emoji': 'üëë', 'description': 'Bot owner and admin commands'},
            'Fishing': {'emoji': 'üé£', 'description': 'Fishing system and related commands'},
            'AutoFishing': {'emoji': 'ü§ñ', 'description': 'Automated fishing features'},
            'Other': {'emoji': 'üì¶', 'description': 'Miscellaneous commands'}
        }
        
        # Define cog to category mappings
        self.cog_categories = {
            'Economy': ['Economy', 'Work', 'Gambling', 'Giveaway', 'Trading', 'Shop', 'Bazaar'],
            'Fun': ['Fun', 'Text', 'Multiplayer', 'TicTacToe', 'Cypher', 'MathRace'],
            'Utility': ['Utility', 'Reminders', 'Status'],
            'Moderation': ['Moderation', 'VoteBans', 'Welcoming', 'Admin'],
            'Music': ['MusicCore', 'MusicControls', 'MusicQueue', 'MusicPlayer'],
            'Settings': ['GeneralSettings', 'ModerationSettings', 'EconomySettings', 'MusicSettings', 'WelcomeSettings', 'LoggingSettings'],
            'Fishing': ['FishingCore', 'FishingInventory', 'FishingSelling', 'FishingStats'],
            'AutoFishing': ['AutoFishing']
        }
        
        logger.info("Help cog initialized")
    
    def _get_command_signature(self, command: Union[commands.Command, commands.Group]) -> str:
        """Get a formatted command signature"""
        if isinstance(command, commands.Group):
            return f"{command.name} <subcommand>"
        else:
            return f"{command.name} {command.signature}".strip()
    
    def _format_command_help(self, command: Union[commands.Command, commands.Group]) -> str:
        """Format command help text with proper truncation"""
        if isinstance(command, commands.Group):
            subcommands = [sub.name for sub in command.commands if not sub.hidden]
            help_text = command.help or "Group command"
            if subcommands:
                help_text += f"\n**Subcommands:** {', '.join(subcommands[:5])}"
                if len(subcommands) > 5:
                    help_text += f" (+{len(subcommands) - 5} more)"
        else:
            help_text = command.help or "No description available"
        
        # Truncate if too long
        if len(help_text) > 100:
            help_text = help_text[:97] + "..."
        
        return help_text
    
    def _categorize_cog(self, cog_name: str) -> str:
        """Determine which category a cog belongs to"""
        for category, cogs in self.cog_categories.items():
            if cog_name in cogs or cog_name.lower() in [c.lower() for c in cogs]:
                return category
        return 'Other'
    
    def _should_show_cog(self, cog_name: str, user_id: int) -> bool:
        """Determine if a cog should be shown to the user"""
        # Hidden cogs
        hidden_cogs = ['help', 'jishaku', 'dev', 'performance', 'fishingmain', 'error']
        if cog_name.lower() in hidden_cogs:
            return False
        
        # Admin-only cogs
        admin_cogs = ['admin']
        if cog_name.lower() in admin_cogs and user_id not in BOT_ADMINS:
            return False
        
        return True
    
    def _prettify_cog_name(self, cog_name: str) -> str:
        """Convert cog names to prettier display names"""
        # Special mappings for specific cogs
        name_mappings = {
            'GeneralSettings': 'General Settings',
            'ModerationSettings': 'Moderation Settings', 
            'EconomySettings': 'Economy Settings',
            'MusicSettings': 'Music Settings',
            'WelcomeSettings': 'Welcome Settings',
            'LoggingSettings': 'Logging Settings',
            'FishingCore': 'Fishing',
            'FishingInventory': 'Fishing Inventory',
            'FishingSelling': 'Fishing Selling',
            'FishingStats': 'Fishing Stats',
            'AutoFishing': 'Auto Fishing',
            'MusicCore': 'Music Player',
            'MusicControls': 'Music Controls',
            'MusicQueue': 'Music Queue',
            'MusicPlayer': 'Music Playback',
            'VoteBans': 'Vote Bans',
            'TicTacToe': 'Tic Tac Toe',
            'MathRace': 'Math Race'
        }
        
        if cog_name in name_mappings:
            return name_mappings[cog_name]
        
        # Auto-prettify by adding spaces before capitals
        import re
        # Add space before capitals that follow lowercase letters
        pretty_name = re.sub(r'([a-z])([A-Z])', r'\1 \2', cog_name)
        return pretty_name
    
    def _search_commands(self, query: str) -> List[commands.Command]:
        """Search for commands matching the query"""
        query = query.lower()
        matching_commands = []
        
        for command in self.bot.commands:
            # Skip hidden commands
            if command.hidden:
                continue
                
            # Check command name
            if query in command.name.lower():
                matching_commands.append(command)
                continue
                
            # Check aliases
            if hasattr(command, 'aliases') and command.aliases:
                for alias in command.aliases:
                    if query in alias.lower():
                        matching_commands.append(command)
                        break
                else:
                    # Check help text if no alias match
                    if command.help and query in command.help.lower():
                        matching_commands.append(command)
            elif command.help and query in command.help.lower():
                matching_commands.append(command)
        
        return matching_commands
    
    def _format_group_commands(self, group: commands.Group) -> discord.Embed:
        """Format group commands into an embed"""
        embed = discord.Embed(
            title=f"üìã Group: {group.name}",
            description=group.help or "No description available",
            color=discord.Color.blue()
        )
        
        if group.aliases:
            embed.add_field(
                name="Aliases",
                value=f"`{', '.join(group.aliases)}`",
                inline=False
            )
        
        # Add subcommands
        subcommands = [cmd for cmd in group.commands if not cmd.hidden]
        if subcommands:
            subcommand_text = ""
            for i, subcmd in enumerate(subcommands):
                if i >= 10:  # Limit to prevent embed being too large
                    subcommand_text += f"\n... and {len(subcommands) - 10} more"
                    break
                signature = self._get_command_signature(subcmd)
                help_text = self._format_command_help(subcmd)
                subcommand_text += f"**{signature}**\n{help_text}\n\n"
            
            embed.add_field(
                name=f"Subcommands ({len(subcommands)})",
                value=subcommand_text,
                inline=False
            )
        else:
            embed.add_field(
                name="Subcommands",
                value="No subcommands available",
                inline=False
            )
        
        embed.set_footer(text=f"Use `.help {group.name} <subcommand>` for detailed help")
        return embed
    
    @commands.command(aliases=['support'])
    async def invite(self, ctx):
        """Get the bot's invite link & support server."""
        await self._send_invite(ctx)
    
    @discord.app_commands.command(name="invite", description="Get the bot's invite link and support server")
    async def invite_slash(self, interaction: discord.Interaction):
        """Get the bot's invite link & support server."""
        await self._send_invite(interaction)
    
    async def _send_invite(self, ctx_or_interaction):
        """Send invite information"""
        embed = discord.Embed(
            title="üîó Invite & Support",
            description=(
                f"**[Add {self.bot.user.name} to your server]"
                f"(https://discord.com/oauth2/authorize?client_id={self.bot.user.id}&permissions=8&scope=bot%20applications.commands)**\n\n"
                "**[Join Support Server](https://discord.gg/jvyYWkj3ts)**\n"
                "**[Source Code](https://github.com/bronxbot/bot)**\n\n"
                "*Need help? Join our support server for assistance!*"
            ),
            color=self._get_color(ctx_or_interaction)
        )
        embed.set_thumbnail(url=self.bot.user.display_avatar.url)
        await self._respond(ctx_or_interaction, embed)
    
    @commands.command(name='help', aliases=['h', 'commands'])
    async def help(self, ctx, *, command: str = None):
        """Show help for commands or command categories"""
        await self._send_help(ctx, command)
    
    @discord.app_commands.command(name="help", description="Show help for commands or command categories")
    async def help_slash(self, interaction: discord.Interaction, command: str = None):
        """Show help for commands or command categories"""
        await self._send_help(interaction, command)
        """Slash command version of invite"""
        await self._send_invite(interaction)
    
    async def _send_invite(self, ctx_or_interaction):
        """Shared logic for both command types"""
        embed = discord.Embed(
            title="invite bronx",
            url="https://bronxbot.onrender.com/invite",
            description="[invite](https://bronxbot.onrender.com/invite) | [support](https://discord.gg/jvyYWkj3ts) | [website](https://bronxbot.onrender.com)",
            color=0x2b2d31
        )
        embed.set_footer(text="thanks for using bronx bot!")
        
        if isinstance(ctx_or_interaction, discord.Interaction):
            await ctx_or_interaction.response.send_message(embed=embed)
        else:
            await ctx_or_interaction.reply(embed=embed)

    @commands.command(name="help", aliases=["h", "commands"])
    async def help(self, ctx, *, command=None):
        """Show help information for commands"""
        await self._send_help(ctx, command)
    
    @discord.app_commands.command(name="help", description="Show help information for commands")
    @discord.app_commands.describe(command="The command or category to get help for")
    async def help_slash(self, interaction: discord.Interaction, command: str = None):
        """Slash command version of help"""
        await self._send_help(interaction, command)
    
    async def _send_help(self, ctx_or_interaction, command=None):
        """Shared logic for both command types"""
        if command:
            # Check if it's a search query (starts with search:)
            if command.startswith('search:'):
                query = command[7:].strip()
                if not query:
                    embed = discord.Embed(
                        title="‚ùå Search Error",
                        description="Please provide a search term after `search:`\nExample: `.help search:economy`",
                        color=discord.Color.red()
                    )
                    return await self._respond(ctx_or_interaction, embed)
                
                matching_commands = self._search_commands(query)
                if not matching_commands:
                    embed = discord.Embed(
                        title=f"üîç Search Results for '{query}'",
                        description="No commands found matching your search.",
                        color=discord.Color.orange()
                    )
                    return await self._respond(ctx_or_interaction, embed)
                
                # Create search results embed
                embed = discord.Embed(
                    title=f"üîç Search Results for '{query}'",
                    description=f"Found {len(matching_commands)} command(s)",
                    color=discord.Color.green()
                )
                
                for i, cmd in enumerate(matching_commands[:10]):  # Limit to 10 results
                    signature = self._get_command_signature(cmd)
                    help_text = self._format_command_help(cmd)
                    embed.add_field(
                        name=f"`{signature}`",
                        value=help_text,
                        inline=False
                    )
                
                if len(matching_commands) > 10:
                    embed.set_footer(text=f"Showing first 10 of {len(matching_commands)} results")
                
                return await self._respond(ctx_or_interaction, embed)
            
            # Check if it's a cog first
            cog = self.bot.get_cog(command)
            if cog:
                # Help for a cog
                commands_list = [cmd for cmd in cog.get_commands() if not cmd.hidden]
                if not commands_list:
                    embed = discord.Embed(
                        title="‚ùå No Commands",
                        description=f"No accessible commands found in `{self._prettify_cog_name(cog.qualified_name)}`",
                        color=discord.Color.red()
                    )
                    return await self._respond(ctx_or_interaction, embed)
                
                # Create cog help embed
                pretty_name = self._prettify_cog_name(cog.qualified_name)
                embed = discord.Embed(
                    title=f"üìã {pretty_name} Commands",
                    description=cog.description or f"Commands available in {pretty_name}",
                    color=discord.Color.blue()
                )
                
                # Group commands by type
                regular_commands = []
                group_commands = []
                
                for cmd in sorted(commands_list, key=lambda x: x.name):
                    if isinstance(cmd, commands.Group):
                        group_commands.append(cmd)
                    else:
                        regular_commands.append(cmd)
                
                # Add regular commands
                if regular_commands:
                    command_text = ""
                    for cmd in regular_commands:
                        signature = self._get_command_signature(cmd)
                        help_text = self._format_command_help(cmd)
                        command_text += f"**{signature}**\n{help_text}\n\n"
                    
                    embed.add_field(
                        name=f"Commands ({len(regular_commands)})",
                        value=command_text,
                        inline=False
                    )
                
                # Add group commands
                if group_commands:
                    group_text = ""
                    for group in group_commands:
                        signature = self._get_command_signature(group)
                        help_text = self._format_command_help(group)
                        group_text += f"**{signature}**\n{help_text}\n\n"
                    
                    embed.add_field(
                        name=f"Command Groups ({len(group_commands)})",
                        value=group_text,
                        inline=False
                    )
                
                embed.set_footer(text=f"Total: {len(commands_list)} commands | Use `.help <command>` for details")
                return await self._respond(ctx_or_interaction, embed)

            # Help for specific command
            cmd = self.bot.get_command(command.lower())
            if not cmd:
                # Try fuzzy search for suggestions
                suggestions = self._search_commands(command)[:3]
                if suggestions:
                    suggestion_text = "\n".join([f"‚Ä¢ `{cmd.name}`" for cmd in suggestions])
                    embed = discord.Embed(
                        title="‚ùå Command Not Found",
                        description=f"Couldn't find command `{command}`\n\n**Did you mean:**\n{suggestion_text}",
                        color=discord.Color.red()
                    )
                else:
                    embed = discord.Embed(
                        title="‚ùå Command Not Found",
                        description=f"Couldn't find command `{command}`\n\nTry `.help search:{command}` to search for similar commands.",
                        color=discord.Color.red()
                    )
                return await self._respond(ctx_or_interaction, embed)
            
            # Handle group commands
            if isinstance(cmd, commands.Group):
                embed = self._format_group_commands(cmd)
                return await self._respond(ctx_or_interaction, embed)
            
            # Regular command help
            embed = discord.Embed(
                title=f"üìã Command: {cmd.name}",
                color=discord.Color.blue()
            )
            
            # Command signature
            signature = self._get_command_signature(cmd)
            embed.add_field(
                name="Usage",
                value=f"`{signature}`",
                inline=False
            )
            
            # Description
            if cmd.help:
                embed.add_field(
                    name="Description", 
                    value=cmd.help,
                    inline=False
                )
            
            # Aliases
            if cmd.aliases:
                embed.add_field(
                    name="Aliases",
                    value=f"`{', '.join(cmd.aliases)}`",
                    inline=False
                )
            
            # Cooldown info
            if cmd._buckets and cmd._buckets._cooldown:
                cooldown = cmd._buckets._cooldown
                embed.add_field(
                    name="Cooldown",
                    value=f"{cooldown.rate} use(s) per {cooldown.per} second(s)",
                    inline=True
                )
            
            return await self._respond(ctx_or_interaction, embed)
        
        # Paginated help menu
        pages = []
        total_commands = 0
        cog_page_map = {}
        page_index = 1  # Start at 1 because overview is at 0
        
        # Group fishing-related cogs
        fishing_commands = []
        autofishing_commands = []
        
        for cog_name, cog in sorted(self.bot.cogs.items(), key=lambda x: x[0].lower()):
            if cog_name.lower() in ['help', 'jishaku', 'dev', 'moderation', 'votebans', 'stats', 'welcoming', 'performance', 'fishingmain']:
                continue

            if isinstance(ctx_or_interaction, (discord.Interaction, commands.Context)):
                user_id = ctx_or_interaction.user.id if isinstance(ctx_or_interaction, discord.Interaction) else ctx_or_interaction.author.id
                if user_id not in BOT_ADMINS and cog_name.lower() in ['admin', 'owner']:
                    continue
            
            commands_list = [cmd for cmd in cog.get_commands() if not cmd.hidden]
            if not commands_list:
                continue

            # Handle fishing modules specially
            if cog_name.lower() == 'autofishing':
                autofishing_commands.extend(commands_list)
                continue
            elif cog_name.lower() in ['fishingcore', 'fishinginventory', 'fishingselling', 'fishingstats'] or (hasattr(cog, '__module__') and 'fishing' in cog.__module__ and cog_name.lower() != 'autofishing'):
                fishing_commands.extend(commands_list)
                continue

            # Regular cog processing
            cog_page_map[cog_name] = page_index
            page_index += 1

            pretty_name = self._prettify_cog_name(cog_name)
            embed = discord.Embed(
                title=f"üìã {pretty_name}",
                description=cog.description or f"Commands available in {pretty_name}",
                color=self._get_color(ctx_or_interaction)
            )
            
            # Group commands by type
            regular_commands = []
            group_commands = []
            
            for cmd in sorted(commands_list, key=lambda x: x.name):
                if isinstance(cmd, commands.Group):
                    group_commands.append(cmd)
                else:
                    regular_commands.append(cmd)
            
            command_text = ""
            
            # Add regular commands
            for cmd in regular_commands:
                usage = f".{cmd.name} {cmd.signature}".strip()
                description = self._format_command_help(cmd)
                command_text += f"**{usage}**\n{description}\n\n"
                total_commands += 1
            
            # Add group commands
            for group in group_commands:
                usage = f".{group.name} <subcommand>"
                description = self._format_command_help(group)
                command_text += f"**{usage}** (Group)\n{description}\n\n"
                total_commands += 1
            
            if command_text:
                embed.add_field(
                    name=f"Commands ({len(commands_list)})",
                    value=command_text,
                    inline=False
                )
            
            embed.set_footer(text=f"{len(commands_list)} commands ‚Ä¢ Use .help <command> for details")
            pages.append(embed)
        
        # Create Fishing page if we have fishing commands
        if fishing_commands:
            cog_page_map["Fishing"] = page_index
            page_index += 1
            
            embed = discord.Embed(
                title="üé£ Fishing Commands",
                description="Complete fishing system with rods, bait, and catch mechanics",
                color=self._get_color(ctx_or_interaction)
            )
            
            command_text = ""
            for cmd in sorted(fishing_commands, key=lambda x: x.name):
                usage = f".{cmd.name} {cmd.signature}".strip()
                description = self._format_command_help(cmd)
                command_text += f"**{usage}**\n{description}\n\n"
                total_commands += 1
            
            embed.add_field(
                name=f"Commands ({len(fishing_commands)})",
                value=command_text,
                inline=False
            )
            embed.set_footer(text=f"{len(fishing_commands)} commands ‚Ä¢ Use .help <command> for details")
            pages.append(embed)
        
        # Create AutoFishing page if we have autofishing commands
        if autofishing_commands:
            cog_page_map["AutoFishing"] = page_index
            page_index += 1
            
            embed = discord.Embed(
                title="ü§ñ Auto Fishing",
                description="Automated fishing system for hands-free fishing",
                color=self._get_color(ctx_or_interaction)
            )
            
            command_text = ""
            for cmd in sorted(autofishing_commands, key=lambda x: x.name):
                usage = f".{cmd.name} {cmd.signature}".strip()
                description = self._format_command_help(cmd)
                command_text += f"**{usage}**\n{description}\n\n"
                total_commands += 1
            
            embed.add_field(
                name=f"Commands ({len(autofishing_commands)})",
                value=command_text,
                inline=False
            )
            embed.set_footer(text=f"{len(autofishing_commands)} commands ‚Ä¢ Use .help <command> for details")
            pages.append(embed)

        # Overview page
        total_categories = len(cog_page_map)
        categories_per_select = 23  # Max categories per select menu page
        select_pages_needed = (total_categories + categories_per_select - 1) // categories_per_select
        
        overview_embed = discord.Embed(
            title="ü§ñ BronxBot Help",
            description=(
                f"Use the dropdown menu below to navigate between command categories.\n\n"
                f"üìã **Overview**\n"
                f"‚Ä¢ **Total Commands:** {total_commands}\n"
                f"‚Ä¢ **Categories:** {total_categories}\n"
                f"‚Ä¢ **Select Pages:** {select_pages_needed}\n\n"
                f"ÔøΩ **Search Commands**\n"
                f"‚Ä¢ Use `.help search:<term>` to find commands\n"
                f"‚Ä¢ Example: `.help search:money` or `.help search:music`\n\n"
                f"ÔøΩüí° **Navigation Tips:**\n"
                f"‚Ä¢ Use `.help <command>` for detailed command info\n"
                f"‚Ä¢ Use `.help <category>` for category commands\n"
                f"‚Ä¢ Navigate categories with the dropdown menu\n"
                f"‚Ä¢ Use arrow buttons to browse pages\n"
                f"‚Ä¢ Click üóëÔ∏è to close this help menu"
            ),
            color=self._get_color(ctx_or_interaction)
        )
        
        if total_categories > 23:
            overview_embed.add_field(
                name="üìÇ Category Navigation",
                value=(
                    f"Categories are split across {select_pages_needed} dropdown pages.\n"
                    f"Use **‚¨ÖÔ∏è Previous Categories** and **‚û°Ô∏è More Categories** "
                    f"options in the dropdown to navigate between them."
                ),
                inline=False
            )
        
        pages.insert(0, overview_embed)
        
        # Create and send paginator
        author = ctx_or_interaction.user if isinstance(ctx_or_interaction, discord.Interaction) else ctx_or_interaction.author
        view = HelpPaginator(pages, author, cog_page_map)
        
        view.update_buttons()
        if isinstance(ctx_or_interaction, discord.Interaction):
            message = await ctx_or_interaction.response.send_message(embed=pages[0], view=view)
            if isinstance(message, discord.InteractionResponse):
                # Need to fetch the message if it's an interaction response
                message = await ctx_or_interaction.original_response()
        else:
            message = await ctx_or_interaction.reply(embed=pages[0], view=view)
        
        view.message = message
    
    def _get_color(self, ctx_or_interaction):
        """Get the color based on context or interaction"""
        if isinstance(ctx_or_interaction, discord.Interaction):
            return ctx_or_interaction.user.accent_color or discord.Color.blue()
        else:
            return ctx_or_interaction.author.accent_color or discord.Color.blue()
    
    async def _respond(self, ctx_or_interaction, embed):
        """Respond to either context or interaction"""
        if isinstance(ctx_or_interaction, discord.Interaction):
            await ctx_or_interaction.response.send_message(embed=embed)
        else:
            await ctx_or_interaction.reply(embed=embed)

    @help.error
    async def help_error(self, ctx, error):
        """Handle help command errors"""
        if isinstance(error, commands.CommandNotFound):
            await ctx.reply("‚ùå Command not found!")
        else:
            await self.handle_error(ctx, error, "help")
    
    @help_slash.error
    async def help_slash_error(self, interaction: discord.Interaction, error):
        logger.error(f"Help slash command error: {error}")
        await interaction.response.send_message("An error occurred with the help command.", ephemeral=True)

    @invite_slash.error
    async def invite_slash_error(self, interaction: discord.Interaction, error):
        logger.error(f"Invite slash command error: {error}")
        await interaction.response.send_message("An error occurred with the invite command.", ephemeral=True)


async def setup(bot):
    try:
        await bot.add_cog(Help(bot))
        # Sync commands
        await bot.tree.sync()
        logger.info("Help cog loaded and commands synced")
    except Exception as e:
        logger.error(f"Failed to load Help cog: {e}")
        raise e